------------------------------------ What is state? ------------------------------------
1) State is a built in object of the React Components.
2) The State object is used to store all the data that belongs to that particular 
component only.
3) The state is only accessible inside the component it belongs to.
4) State is mutable, it can be changed as per the need
5) Whenever the state object changes the component is re-rendered 
6) To use state inside a class component "this.state" is used.

------------------------------------ What is "Props"? ------------------------------------
1) React is a component based library which divides the UI into little
resusable pieces.

2) In some cases, those components need to communicate (send data to each other)
and the way to pass data between components is by using props.

3) "Props" is a special keyword in React, which stands for properties and is 
being used for passing data from one component to another. 

4) But the important part here is that data with props are being passed in 
a uni-directional flow. (one way from parent to child).

------------------------------------ Class Based Components ------------------------------------
These components are simple classes (made up of multiple functions that add functionality to the application).
 All class based components are child classes for the Component class of ReactJS.

 Code Example:
 import React from "react";
 
class App extends React.Component {
  render() {
    return <h1>Class Based Components</h1>;
  }
}
 
export default App;

The main feature of class-based components that distinguished them from functional components 
is that they have access to a state which dictates the current behavior and appearance of the component.

------------------------------------ Functional Based Components ------------------------------------
 These are simply JavaScript functions. We can create a functional component in React by writing a JavaScript function. 
 These functions may or may not receive data as parameters. In the functional Components, the return value is the JSX code to render to the DOM tree.

 Different ways of calling the functional component:

 1. Calling the function by using the name of the function followed by the Parentheses.

// Example of Calling the function with function name followed by Parentheses
import React from 'react';
import ReactDOM from 'react-dom/client';
function Parentheses() {
    return (<h1>
                We can call function using name of the 
                function followed by Parentheses 
            </h1>);
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(Parentheses());

2. Calling the function by using the functional component method.

// Example of Calling the function using component call
import React from 'react';
import ReactDOM from 'react-dom/client';
function Comp() {
    return (<h1> As usual we can call the function using component call</h1>);
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Comp />);

JSX 
JSX(JavaScript Extension), is a React extension which allows writing JavaScript code that looks like HTML.
In other words, JSX is an HTML-like syntax used by React that extends ECMAScript so that HTML-like syntax 
can co-exist with JavaScript/React code.The syntax is used by preprocessors (i.e., transpilers like babel) 
to transform HTML-like syntax into standard JavaScript objects that a JavaScript engine will parse.

JSX provides you to write HTML/XML-like structures (e.g., DOM-like tree structures)
in the same file where you write JavaScript code, then preprocessor will transform these expressions
into actual JavaScript code. Just like XML/HTML, JSX tags have a tag name, attributes, and children.

Example
Here, we will write JSX syntax in JSX file and see the corresponding JavaScript code which transforms by preprocessor(babel).

JSX File

<div>Hello JavaTpoint</div>  

For Status Code vist this link => https://www.tutorialspoint.com/http/http_status_codes.htm#:~:text=The%20Status%2DCode%20element%20in,not%20have%20any%20categorization%20role.

Point 1: Hooks in React JS

Ques) What is the Hooks in React JS?
Ans) A Hook is a special function that lets you “hook into” React features. For example, useState is a Hook that lets you add React state to function components. 

Ques) What is Redux?
Ans ) Redux can be defined in following points
1) A container where you can store your whole aaplication data.

2) So we call it to state management

3) It doesn't belong to the component state.

Point 2: Hooks in Details
More About Hooks in React JS
Hooks were added to React in version 16.8. Hooks let you use state and other React features without writing a class.

Although states have largely replaced classes in React, there is no plan of removing classes from React. 

Things you need to keep in mind while using hooks:

(1) You must import hook first.
(2) You must import it from react.
(3) Hooks can only be called in React Function Components, meaning:

Code Example:
// import statements
// Can't call here
const Blogs = () => {
    // Can call here
    return <h1>Blogs</h1>;
};

export default Blogs;

(4) Hooks cannot be conditional
(5) Hooks cannot work in React Class Components
(6) Hooks can only be called at the top level of a component, meaning it can't be called from inside a block, i.e. {}. So, can't be called inside if, loops or any block, example:

Code Example:
const Blogs = () => {
    // Can call here
    if (true){
        // Can't call here
    }
    return <h1>Blogs</h1>;
};

export default Blogs;

Point 3: Hooks it's types
React useState Hook
useState is a Hook that lets you add React state to function components. 

Importing useState
To use useState, first we need to import useState and initialize it, you can import it from react like this:

import { useState } from "react";
_____________________________________________________________________________________________________________________________________________________________________
Point 4: Initializing useState
You can initialize state like this:

import { useState } from "react";

const App = () => {
    const [name, setName] = useState('')
};
useState takes initial state as argument and gives a state and a function(setName in this case) to update that state as we can't directly change/update a state.
 Also, these state names are just like variables, hence you can name them anything you like. 
_____________________________________________________________________________________________________________________________________________________________________
Point 5: Reading a state
As mentioned earlier, it returns a state and a function to change/update that state. Hence, everything is stored in name. We can read states just like variables:

import { useState } from "react";

const App = () => {
    const [name, setName] = useState('')

    return <h1>My name is {name}</h1>
};
_____________________________________________________________________________________________________________________________________________________________________
Point 6: Updating a state
To update state we use the function it returns to update state, in this case: setName. State can be updated like this:

import { useState } from "react";

const App = () => {
    const [name, setName] = useState('')
    setName('Lovish')

    return <h1>My name is {name}</h1>
};
_____________________________________________________________________________________________________________________________________________________________________
Point 7: What can state hold?
Like normal variables, state can hold any datatype like strings, numbers, booleans, arrays, objects, objects in arrays, arrays in objects. For example:

import { useState } from "react";

const App = () => {
    const [data, setData] = useState({
        name: 'Lovish',
        age: 21
    })

    return <h1>My name is {data.name} and my age is {data.age}</h1>
};
_____________________________________________________________________________________________________________________________________________________________________
Point 8: Updating Objects and Arrays in State
import { useState } from "react";

const App = () => {
  const [data, setData] = useState({
    name: 'lovish',
    age: 21
  })

  return <>
    <h1>My name is {data.name} and my age is {data.age}</h1>
    <button onClick={() => setData({ ...data, name: 'CWH' })}>Click Me</button></>
};

export default App;
_____________________________________________________________________________________________________________________________________________________________________
Point 9: React useEffect Hook
The useEffect Hook allows you to perform side effects in your components.

useEffect accepts two arguments. The second one is optional. 

Runs on every render:
Code Example:
import { useState, useEffect } from "react";

function Home() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  });

  return <h1>I have rendered {count} times!</h1>;
}

export default Home;
_____________________________________________________________________________________________________________________________________________________________________
Point 10: Runs on first render:
Code Example:
import { useState, useEffect } from "react";

function Home() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    setTimeout(() => {
      setCount((count) => count + 1);
    }, 1000);
  }, []);

  return <h1>I have rendered {count} times!</h1>;
}

export default Home;
_____________________________________________________________________________________________________________________________________________________________________
Point 11: Runs when data changes:
Code Example:
import { useState, useEffect } from "react";

function Home() {
  const [count, setCount] = useState(0);
  const [data, setData] = useState('');

  const handleChange = (e) => {
    setData(e.target.value)
  }

  useEffect(() => {
    setCount((count) => count + 1);
  }, [data]);

  return (
    <>
      <input onChange={handleChange} value={data} />
      <p>{count}</p>
    </>
  );
}

export default Home;
_____________________________________________________________________________________________________________________________________________________________________
Point 12: API Call
What is an API call?
Application programming interfaces (APIs) are a way for one program to interact with another.
 API calls are the medium by which they interact. An API call, or API request, 
 is a message sent to a server asking an API to provide a service or information.

If Jan is hosting a lot of guests for dinner, she might call a catering company and 
ask that they prepare food for the party. This saves her a great deal of time and 
effort preparing food herself. Similarly, one application can "call" another for needed data or functionality. 
This ensures developers do not have to spend time and effort building application capabilities that can be integrated via API.

Because APIs are integrated into almost all web applications today, API calls take place behind the 
scenes all the time. Suppose someone searches for bus tickets on a travel website. The travel website 
sends an API call to the various bus companies' servers and receives back information about what rides are available 
and how much they cost. From the user's perspective, this process should be almost instantaneous.
_____________________________________________________________________________________________________________________________________________________________________
Shortcuts use in this IDE Visual Studio Code
To open Explorer : Ctrl + Shift + E 
Format Document : Ctrl + Shift + F 
Change All Occurrences : Ctrl + F2 
Rename Symbol : F2 
Copy Text : Ctrl + C
Paste Text : Ctrl + V 
