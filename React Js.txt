What is state?
1) State is a built in object of the React Components.
2) The State object is used to store all the data that belongs to that particular 
component only.
3) The state is only accessible inside the component it belongs to.
4) State is mutable, it can be changed as per the need
5) Whenever the state object changes the component is re-rendered 
6) To use state inside a class component "this.state" is used.

What is "Props"?
1) React is a component based library which divides the UI into little
resusable pieces.

2) In some cases, those components need to communicate (send data to each other)
and the way to pass data between components is by using props.

3) "Props" is a special keyword in React, which stands for properties and is 
being used for passing data from one component to another. 

4) But the important part here is that data with props are being passed in 
a uni-directional flow. (one way from parent to child).

Class Based Components
These components are simple classes (made up of multiple functions that add functionality to the application).
 All class based components are child classes for the Component class of ReactJS.

 Code Example:
 import React from "react";
 
class App extends React.Component {
  render() {
    return <h1>Class Based Components</h1>;
  }
}
 
export default App;

The main feature of class-based components that distinguished them from functional components 
is that they have access to a state which dictates the current behavior and appearance of the component.

Functional Based Components
 These are simply JavaScript functions. We can create a functional component in React by writing a JavaScript function. 
 These functions may or may not receive data as parameters. In the functional Components, the return value is the JSX code to render to the DOM tree.

 Different ways of calling the functional component:

 1. Calling the function by using the name of the function followed by the Parentheses.

// Example of Calling the function with function name followed by Parentheses
import React from 'react';
import ReactDOM from 'react-dom/client';
function Parentheses() {
    return (<h1>
                We can call function using name of the 
                function followed by Parentheses 
            </h1>);
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(Parentheses());

2. Calling the function by using the functional component method.

// Example of Calling the function using component call
import React from 'react';
import ReactDOM from 'react-dom/client';
function Comp() {
    return (<h1> As usual we can call the function using component call</h1>);
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Comp />);

JSX 
JSX(JavaScript Extension), is a React extension which allows writing JavaScript code that looks like HTML.
In other words, JSX is an HTML-like syntax used by React that extends ECMAScript so that HTML-like syntax 
can co-exist with JavaScript/React code.The syntax is used by preprocessors (i.e., transpilers like babel) 
to transform HTML-like syntax into standard JavaScript objects that a JavaScript engine will parse.

JSX provides you to write HTML/XML-like structures (e.g., DOM-like tree structures)
in the same file where you write JavaScript code, then preprocessor will transform these expressions
into actual JavaScript code. Just like XML/HTML, JSX tags have a tag name, attributes, and children.

Example
Here, we will write JSX syntax in JSX file and see the corresponding JavaScript code which transforms by preprocessor(babel).

JSX File

<div>Hello JavaTpoint</div>  

For Status Code vist this link => https://www.tutorialspoint.com/http/http_status_codes.htm#:~:text=The%20Status%2DCode%20element%20in,not%20have%20any%20categorization%20role.

Hooks in React JS

Ques) What is the Hooks in React JS?
Ans) A Hook is a special function that lets you “hook into” React features. For example, useState is a Hook that lets you add React state to function components. 
